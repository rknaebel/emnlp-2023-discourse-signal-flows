from typing import List

connectives = {
    'about',
    'accordingly',
    'additionally',
    'after',
    'afterward',
    'afterwards',
    'albeit',
    'along with',
    'also',
    'alternatively',
    'although',
    'and',
    'and then',
    'and/or',
    'as',
    'as a result',
    'as an alternative',
    'as if',
    'as long as',
    'as much as',
    'as soon as',
    'as though',
    'as well',
    'as well as',
    'at the same time',
    'because',
    'because of',
    'before',
    'before and after',
    'besides',
    'beyond',
    'but',
    'but also',
    'but then',
    'but then again',
    'by',
    'by contrast',
    'by comparison',
    'by then',
    'consequently',
    'conversely',
    'depending on',
    'depending upon',
    'despite',
    'due to',
    'earlier',
    'else',
    'even after',
    'even as',
    'even before',
    'even before then',
    'even if',
    'even so',
    'even then',
    'even though',
    'even when',
    'even while',
    'even with',
    'except',
    'finally',
    'for',
    'for example',
    'for instance',
    'from',
    'further',
    'furthermore',
    'given',
    'hence',
    'however',
    'if',
    'if and when',
    'if only',
    'in',
    'in addition',
    'in any case',
    'in case',
    'in contrast',
    'in fact',
    'in order',
    'in other words',
    'in particular',
    'in short',
    'in sum',
    'in that',
    'in the end',
    'in the meantime',
    'in the meanwhile',
    'indeed',
    'insofar as',
    'instead',
    'instead of',
    'later',
    'later on',
    'lest',
    'like',
    'likewise',
    'meantime',
    'meanwhile',
    'more accurately',
    'moreover',
    'much less',
    'nevertheless',
    'next',
    'no matter',
    'nonetheless',
    'nor',
    'not only',
    'not only because of',
    'not so much as',
    'now that',
    'on',
    'on the contrary',
    'on the one hand',
    'on the other hand',
    'once',
    'only',
    'only of',
    'or',
    'or otherwise',
    'otherwise',
    'plus',
    'previously',
    'rather',
    'rather than',
    'regardless',
    'regardless of',
    'separately',
    'similarly',
    'simultaneously',
    'since',
    'since before',
    'so',
    'so as',
    'so long as',
    'so much as',
    'so that',
    'specifically',
    'still',
    'subsequently',
    'such as',
    'that is',
    'then',
    'thereafter',
    'thereby',
    'therefore',
    'though',
    'thus',
    'till',
    'ultimately',
    'unless',
    'until',
    'upon',
    'whatever',
    'when',
    'when and if',
    'whenever',
    'where',
    'whereas',
    'whether',
    'while',
    'with',
    'without',
    'yet',
}

single_connectives = {c for c in connectives if len(c.split(' ')) == 1}

multi_connectives = list(map(lambda s: s.split(' '), (c for c in connectives if len(c.split(' ')) > 1)))

distant_connectives = list(map(lambda s: s.split(' '), [
    'both and',
    'either or',
    'if then',
    'neither nor',
    'not just but',
    'not just but also',
    'not only also',
    'not only but',
    'not only but also',
    'on the one hand on the other',
    'on the one hand on the other hand',
]))

multi_connectives_first = {conn[0] for conn in multi_connectives}


def get_connective_candidates(tokens: List[str]):
    candidates = []
    sentence = [w.lower().strip("'") for w in tokens]
    words = set(sentence)
    for word_idx, word in enumerate(sentence):
        for conn in distant_connectives:
            if word == conn[0]:
                if all(c in words for c in conn[1:]):
                    candidate = [(word_idx, conn[0])]
                    try:
                        i = word_idx
                        for c in conn[1:]:
                            i = sentence.index(c, i)
                            candidate.append((i, c))
                    except ValueError:
                        # print('distant error...', sentence, candidate)
                        continue
                    candidates.append(candidate)
        if word in multi_connectives_first:
            for multi_conn in multi_connectives:
                if (word_idx + len(multi_conn)) <= len(sentence) and all(
                        c == sentence[word_idx + i] for i, c in enumerate(multi_conn)):
                    candidates.append([(word_idx + i, c) for i, c in enumerate(multi_conn)])
        if word in single_connectives:
            candidates.append([(word_idx, word)])
    return candidates
